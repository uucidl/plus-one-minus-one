/* a10 788
 * Copyright (c) 2001-2012 Nicolas Léveillé <knos.free.fr>
 *
 * You should have received this file ('src/system/event.h') with a license
 * agreement. ('LICENSE' file)
 *
 * Copying, using, modifying and distributing this file are rights
 * covered under this licensing agreement and are conditioned by its
 * full acceptance and understanding.
 * e 788 */

#ifndef KNOS_DEMOS_SYSTEM_EVENT_H
#define KNOS_DEMOS_SYSTEM_EVENT_H

#include <scripting/bytecode.h>
#include <scripting/bytecode_stream.h>
#include <library/strings.h>
#include <library/memory.h>

typedef struct event_t {
    object_t super;
    bytecode_t *hierarchy;
    int size;
} event_t;

CLASS_INHERIT(event, object);

int event_new(event_t *e, unsigned int size);
int event_new_from_string(event_t *e, const string_t *string);
int event_new_from_cstring(event_t *e, const char *string);
int event_new_from_bytecode_stream(event_t *e, bytecode_stream_t *stream);
int event_match_p(const event_t *self, const event_t *event);
int event_equals(const event_t *a, const event_t *b);
event_t *event_copy(const event_t *self, event_t *to);
char *event_as_cstring(const event_t *self);
int event_destroy(event_t *e);

/*--- key event ----------------------------------------------*/

typedef event_t key_event_t;

/* with
     hierarchy:
       atom:key (atom:up | atom:down) atom:<key-name> int:<utf8>
     size: 4

"key", "up", "down" ++ key symbols
*/

static inline object_t *key_event_to_object(key_event_t *x)
{
    return event_to_object(x);
}

DEFINE_OBJECT_INSTANTIATE(key_event);

/*--- mouse event --------------------------------------------*/

typedef event_t mouse_event_t;
typedef event_t mouse_move_event_t;
typedef event_t mouse_button_event_t;

/* with
     hierarchy atom:mouse
     (atom:move integer:<coordinate> integer:<coordinate>) |
     (atom:button (atom:up | atom:down) atom:<button-name>)

-- coordinate is relative to the origin (0,0) (left,top)

"mouse", "move" "button" "up", "down", "lmb", "mmb", "rmb"
*/

static inline object_t *mouse_event_to_object(mouse_event_t *x)
{
    return event_to_object(x);
}

static inline object_t *mouse_move_event_to_object(mouse_event_t *x)
{
    return event_to_object(x);
}

static inline object_t *mouse_button_event_to_object(mouse_event_t *x)
{
    return event_to_object(x);
}

DEFINE_OBJECT_INSTANTIATE(mouse_event);
DEFINE_OBJECT_INSTANTIATE(mouse_move_event);
DEFINE_OBJECT_INSTANTIATE(mouse_button_event);

/*--- drop event ----------------------------------------------*/

typedef event_t drop_event_t;
/* with
   hierarchy atom:drop atom:file string:<filename>

   as generated by the event_listeners, the string must be copied
   as it will be cleaned up after accept has been called.
*/

static inline object_t *drop_event_to_object(drop_event_t *x)
{
    return event_to_object(x);
}

DEFINE_OBJECT_INSTANTIATE(drop_event);

/*--- signature -----------------------------------------------*/

typedef struct signature_t {
    event_t super;

    /* returns true if event matches signature self */
    int (*match_event_p)(struct signature_t *self, const struct event_t *event);
} signature_t;

/*
  with wildcards:
    atom:?, matches any one element
*/

CLASS_INHERIT(signature, event)

signature_t *signature_instantiate(signature_t *x);

#endif
